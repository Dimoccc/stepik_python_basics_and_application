#https://habr.com/ru/articles/349860/
# https://docs-python.ru/standart-library/modul-re-python/sintaksis-reguljarnogo-vyrazhenija/

# Специальные символы,
# '.' - любой символ;
# '^' - началу строки;
# '$' - конец строки;
# '*' - 0 или более повторений;
# '+' - 1 или более повторений;
# '?' - 0 или 1 повторений;
# '*?', '+?','??' - ограничение жадности;
# '*+', '++', '?+' - притяжательные квантификаторы, (новое в Python 3.11);
# '{m}' - m повторений;
# '{m,n}' - как можно больше повторений в промежутке от m до n ;
# '{m,n}?' - как можно меньше повторений в промежутке от m до n;
# '{m,n}+' - притяжательная версия квантификатора выше, (новое в Python 3.11);
# '\' - экранирование специальных символов;
# '[]' - символьный класс;
# '|' - или;
# '(...)' - группа с захватом;
# Расширения регулярных выражений,
# '(?aiLmsux)' - установка флагов регулярного выражения;
# '(?aiLmsux-imsx:...)' - установка и удаление флагов;
# '(?>...)' - атомарная группа, (новое в Python 3.11);
# '(?:...)' - группа без захвата;
# '(?P<name>...)' - именованная группа;
# '(?P=name)' - обратная ссылка на именованную группу;
# '(?#...)' - комментарий;
# '(?=...)' - опережающая позитивная проверка;
# '(?!...)' - опережающая негативная проверка;
# '(?<=...)' - позитивная ретроспективная проверка;
# '(?<!...)' - негативная ретроспективная проверка;
# '(?(id/name)yes-pattern|no-pattern)' - стараться соответствовать yes-pattern;
# Специальные последовательности.
# '\number' - соответствие группы с тем же номером;
# '\A' - только с начало строки;
# '\b' - пустая строка (начало или конц слова);
# '\B' - пустая строка (НЕ начало или конец слова);
# '\d' - любая десятичная цифра;
# '\D' - НЕ десятичная цифра;
# '\s' - пробельный символ;
# '\S' - НЕ пробельный символ;
# '\w' - символы, которые могут быть частью слова;
# '\W' - символы, которые НЕ могут быть частью слова;
# '\Z' - только с конец строки;
#? - не жадный поиск

import re
# print(re.match.__doc__)
# print(re.search.__doc__)
# print(re.sub.__doc__)

# Множество подходящих символов a[abc]c - aac abc acc 
pattern = r"abc"
string = "abcabcabc"
match_object = re.search(pattern, string)

print(match_object) 

# Замена всех сиволов в сулчаем опечатки и схождения символа в множество подходящих символов

pattern = r"a[abc]c"
string = "acc"
match_object = re.match(pattern, string)
print(match_object)

string = "abc, acc, aac"
all_inclusions = re.findall(pattern, string)
print(all_inclusions)

fixed_typos = re.sub(pattern, "abc", string)
print(fixed_typos)